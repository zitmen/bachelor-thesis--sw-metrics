/*!
 * \file
 * NodeId.h
 * 
 * \author
 * Martin Ovesn√Ω (<a href="mailto:ovesnmar@fel.cvut.cz">ovesnmar@fel.cvut.cz</a>)
 */
#ifndef _ASTM_NODE_ID_H_
#define _ASTM_NODE_ID_H_

namespace NodeId
{
	/*!
	 * \brief
	 * Unique identifiers for identification of syntax tree nodes.
	 *
	 * \see
	 * GASTMObject::identify
	 */
	enum
	{
		ACCESS_KIND,
		ACTUAL_PARAMETER,
		ADD,
		ADDRESS_OF,
		AGGREGATE_EXPRESSION,
		AGGREGATE_SCOPE,
		AGGREGATE_TYPE,
		AGGREGATE_TYPE_DEFINITION,
		AND,
		ANNOTATION_EXPRESSION,
		ANNOTATION_TYPE,
		ARRAY_ACCESS,
		ARRAY_TYPE,
		ASSIGN,
		AUTO,
		BINARY_EXPRESSION,
		BINARY_OPERATOR,
		BIT_AND,
		BIT_FIELD_DEFINITION,
		BIT_LEFT_SHIFT,
		BIT_LITERAL,
		BIT_NOT,
		BIT_OR,
		BIT_RIGHT_SHIFT,
		BIT_XOR,
		BLOCK_SCOPE,
		BLOCK_STATEMENT,
		BOOLEAN,
		BOOLEAN_LITERAL,
		BREAK_STATEMENT,
		BY_REFERENCE_ACTUAL_PARAMETER_TYPE,
		BY_REFERENCE_FORMAL_PARAMETER_TYPE,
		BY_VALUE_ACTUAL_PARAMETER_TYPE,
		BY_VALUE_FORMAL_PARAMETER_TYPE,
		BYTE,
		CASE_BLOCK,
		CAST_EXPRESSION,
		CATCH_BLOCK,
		CHAR_LITERAL,
		CHARACTER,
		CLASS_TYPE,
		COLLECTION_TYPE,
		COMMENT,
		COMPILATION_UNIT,
		CONDITIONAL_EXPRESSION,
		CONSTRUCTED_TYPE,
		CONTINUE_STATEMENT,
		DATA_DEFINITION,
		DATA_TYPE,
		DECLARATION,
		DECLARATION_OR_DEFINITION,
		DECLARATION_OR_DEFINITION_STATEMENT,
		DECREMENT,
		DEFAULT_BLOCK,
		DEFINITION,
		DEFINITION_UNIT,
		DELETE_STATEMENT,
		DEREF,
		DERIVES_FROM,
		DIMENSION,
		DIVIDE,
		DO_WHILE_STATEMENT,
		DOUBLE,
		EMPTY_STATEMENT,
		ENTRY_DEFINITION,
		ENUM_LITERAL_DEFINITION,
		ENUM_TYPE,
		EQUAL,
		EXCEPTION_TYPE,
		EXPONENT,
		EXPRESSION,
		EXPRESSION_STATEMENT,
		EXTERNAL,
		FLOAT,
		FOR_STATEMENT,
		FORMAL_PARAMETER_DECLARATION,
		FORMAL_PARAMETER_DEFINITION,
		FORMAL_PARAMETER_TYPE,
		FUNCTION_CALL_EXPRESSION,
		FUNCTION_DECLARATION,
		FUNCTION_DEFINITION,
		FUNCTION_MEMBER_ATTRIBUTES,
		FUNCTION_SCOPE,
		FUNCTION_TYPE,
		GASTM_OBJECT,
		GASTM_SEMANTIC_OBJECT,
		GASTM_SOURCE_OBJECT,
		GASTM_SYNTAX_OBJECT,
		GLOBAL_SCOPE,
		GREATER,
		IDENTIFIER_REFERENCE,
		IF_STATEMENT,
		INCLUDE_UNIT,
		INCREMENT,
		INTEGER,
		INTEGER_LITERAL,
		JUMP_STATEMENT,
		LABEL_ACCESS,
		LABEL_DEFINITION,
		LABEL_TYPE,
		LABELED_STATEMENT,
		LESS,
		LITERAL,
		LONG_DOUBLE,
		LONG_INTEGER,
		LONG_LONG,
		LOOP_STATEMENT,
		MACRO_CALL,
		MACRO_DEFINITION,
		MODULUS,
		MULTIPLY,
		NAME,
		NAME_REFERENCE,
		NAME_SPACE_DEFINITION,
		NAME_SPACE_SCOPE,
		NAME_SPACE_TYPE,
		NAMED_TYPE,
		NAMED_TYPE_DEFINITION,
		NAMED_TYPE_REFERENCE,
		NEW_EXPRESSION,
		NON_VIRTUAL,
		NOT,
		NOT_EQUAL,
		NOT_GREATER,
		NOT_LESS,
		OPERATOR_ASSIGN,
		OR,
		OTHER_SYNTAX_OBJECT,
		POINTER_TYPE,
		POSITION,
		POST_DECREMENT,
		POST_INCREMENT,
		PREPROCESSOR_ELEMENT,
		PRIMITIVE_TYPE,
		PRIVATE,
		PROGRAM_SCOPE,
		PROJECT,
		PROTECTED,
		PUBLIC,
		PURE_VIRTUAL,
		QUALIFIED_IDENTIFIER_REFERENCE,
		QUALIFIED_OVER_DATA,
		QUALIFIED_OVER_POINTER,
		RANGE_EXPRESSION,
		RANGE_TYPE,
		REAL_LITERAL,
		REFERENCE_TYPE,
		RETURN_STATEMENT,
		SCOPE,
		SHORT_INTEGER,
		SOURCE_FILE,
		SOURCE_LOCATION,
		STATEMENT,
		STATIC,
		STORAGE_SPECIFICATION,
		STRING,
		STRING_LITERAL,
		STRUCTURE_TYPE,
		SUBTRACT,
		SWITCH_CASE,
		SWITCH_STATEMENT,
		THROW_STATEMENT,
		TRY_STATEMENT,
		TYPE,
		TYPE_DEFINITION,
		TYPE_QUALIFIED_IDENTIFIER_REFERENCE,
		TYPE_REFERENCE,
		UNARY_EXPRESSION,
		UNARY_OPERATOR,
		UNARY_MINUS,
		UNARY_PLUS,
		UNION_TYPE,
		UNNAMED_TYPE_REFERENCE,
		VARIABLE_DECLARATION,
		VARIABLE_DEFINITION,
		VIRTUAL,
		VIRTUAL_SPECIFICATION,
		VOID,
		WHILE_STATEMENT,
		WIDE_CHARACTER
	};
}

#endif	// _ASTM_NODE_ID_H_
